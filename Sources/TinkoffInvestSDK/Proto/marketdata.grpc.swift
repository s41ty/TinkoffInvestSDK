//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: marketdata.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
///
/// Usage: instantiate `Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClient`, then call methods of this protocol to make API calls.
public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientInterceptorFactoryProtocol? { get }

  func getCandles(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse>

  func getLastPrices(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse>

  func getOrderBook(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse>

  func getTradingStatus(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse>

  func getLastTrades(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse>
}

extension Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.MarketDataService"
  }

  ///Метод запроса исторических свечей по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCandles.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getCandles(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCandlesInterceptors() ?? []
    )
  }

  ///Метод запроса последних цен по инструментам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastPrices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLastPrices(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastPricesInterceptors() ?? []
    )
  }

  ///Метод получения стакана по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrderBook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOrderBook(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetOrderBook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderBookInterceptors() ?? []
    )
  }

  ///Метод запроса статуса торгов по инструментам.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTradingStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTradingStatus(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetTradingStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTradingStatusInterceptors() ?? []
    )
  }

  ///Метод запроса последних обезличенных сделок по инструменту.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastTrades.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLastTrades(
    _ request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse> {
    return self.makeUnaryCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastTrades",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastTradesInterceptors() ?? []
    )
  }
}

public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getCandles'.
  func makeGetCandlesInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastPrices'.
  func makeGetLastPricesInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse>]

  /// - Returns: Interceptors to use when invoking 'getOrderBook'.
  func makeGetOrderBookInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse>]

  /// - Returns: Interceptors to use when invoking 'getTradingStatus'.
  func makeGetTradingStatusInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastTrades'.
  func makeGetLastTradesInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse>]
}

public final class Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClient: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.MarketDataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate `Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClient`, then call methods of this protocol to make API calls.
public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientInterceptorFactoryProtocol? { get }

  func marketDataStream(
    callOptions: CallOptions?,
    handler: @escaping (Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse) -> Void
  ) -> BidirectionalStreamingCall<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest, Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse>
}

extension Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientProtocol {
  public var serviceName: String {
    return "tinkoff.public.invest.api.contract.v1.MarketDataStreamService"
  }

  ///Bi-directional стрим предоставления биржевой информации.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func marketDataStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse) -> Void
  ) -> BidirectionalStreamingCall<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest, Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/tinkoff.public.invest.api.contract.v1.MarketDataStreamService/MarketDataStream",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarketDataStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'marketDataStream'.
  func makeMarketDataStreamInterceptors() -> [ClientInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest, Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse>]
}

public final class Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClient: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the tinkoff.public.invest.api.contract.v1.MarketDataStreamService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Сервис получения биржевой информации:</br> **1**. свечи;</br> **2**. стаканы;</br> **3**. торговые статусы;</br> **4**. лента сделок.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceProvider: CallHandlerProvider {
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceServerInterceptorFactoryProtocol? { get }

  ///Метод запроса исторических свечей по инструменту.
  func getCandles(request: Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse>

  ///Метод запроса последних цен по инструментам.
  func getLastPrices(request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse>

  ///Метод получения стакана по инструменту.
  func getOrderBook(request: Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse>

  ///Метод запроса статуса торгов по инструментам.
  func getTradingStatus(request: Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse>

  ///Метод запроса последних обезличенных сделок по инструменту.
  func getLastTrades(request: Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse>
}

extension Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.MarketDataService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetCandles":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse>(),
        interceptors: self.interceptors?.makeGetCandlesInterceptors() ?? [],
        userFunction: self.getCandles(request:context:)
      )

    case "GetLastPrices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse>(),
        interceptors: self.interceptors?.makeGetLastPricesInterceptors() ?? [],
        userFunction: self.getLastPrices(request:context:)
      )

    case "GetOrderBook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse>(),
        interceptors: self.interceptors?.makeGetOrderBookInterceptors() ?? [],
        userFunction: self.getOrderBook(request:context:)
      )

    case "GetTradingStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse>(),
        interceptors: self.interceptors?.makeGetTradingStatusInterceptors() ?? [],
        userFunction: self.getTradingStatus(request:context:)
      )

    case "GetLastTrades":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse>(),
        interceptors: self.interceptors?.makeGetLastTradesInterceptors() ?? [],
        userFunction: self.getLastTrades(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getCandles'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCandlesInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetCandlesResponse>]

  /// - Returns: Interceptors to use when handling 'getLastPrices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastPricesInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastPricesResponse>]

  /// - Returns: Interceptors to use when handling 'getOrderBook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrderBookInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetOrderBookResponse>]

  /// - Returns: Interceptors to use when handling 'getTradingStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTradingStatusInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetTradingStatusResponse>]

  /// - Returns: Interceptors to use when handling 'getLastTrades'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastTradesInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesRequest, Tinkoff_Public_Invest_Api_Contract_V1_GetLastTradesResponse>]
}
/// To build a server, implement a class that conforms to this protocol.
public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceProvider: CallHandlerProvider {
  var interceptors: Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceServerInterceptorFactoryProtocol? { get }

  ///Bi-directional стрим предоставления биржевой информации.
  func marketDataStream(context: StreamingResponseCallContext<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse>) -> EventLoopFuture<(StreamEvent<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest>) -> Void>
}

extension Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceProvider {
  public var serviceName: Substring { return "tinkoff.public.invest.api.contract.v1.MarketDataStreamService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MarketDataStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest>(),
        responseSerializer: ProtobufSerializer<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse>(),
        interceptors: self.interceptors?.makeMarketDataStreamInterceptors() ?? [],
        observerFactory: self.marketDataStream(context:)
      )

    default:
      return nil
    }
  }
}

public protocol Tinkoff_Public_Invest_Api_Contract_V1_MarketDataStreamServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'marketDataStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarketDataStreamInterceptors() -> [ServerInterceptor<Tinkoff_Public_Invest_Api_Contract_V1_MarketDataRequest, Tinkoff_Public_Invest_Api_Contract_V1_MarketDataResponse>]
}
